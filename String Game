WA
调试结果：flag一直为0，感觉新数列和第二个数列匹配对比存在问题
#include <iostream>
#include <string>
#include <cstring>
#include <cstdio>
using namespace std;
int main()
{
    string s,t;
    string tem;
    int op[100];
    cin>>t>>s;
    int sum=0;
    int  flag=1;
    int k=0;
    char ch;
    for(int i=0;i<100;i++)
    {
        cin>>op[i];
        ch=getchar();
        if(ch=='\n')
        {
            break;
        }
    }
    while(flag)
    {
        k=0;
        t[op[sum]-1]='1';
        for(int i=0; i<t.length(); i++)
        {
            if(t[i]>='a'&&t[i]<='z')
               {
                  tem[k]=t[i];
                  k++;
               }

        }
        for(int i=0; i<s.length()&&flag&&s.length()<=k; i++)
        {
            for(int j=i; j<k; j++)
            {
                if(s[i]==tem[j])
                {
                    flag=1;
                    break;
                }
                else
                {
                    flag=0;
                }
            }
        }
            if(flag)
            {
                sum++;
            }
            else if(!flag)
            {
                cout<<sum<<endl;
                break;
            }
    }
    return 0;
}




AC：二份序列
#include<iostream>
#include<cstdio>
#include<cstring>
#include<vector>
#include<algorithm>
#include<stdlib.h>
using namespace std;
#define N 200005

char str1[N],str2[N];
int num[N];
bool del[N];

int main()
{
    scanf("%s%s",str1+1,str2+1);
    int len1=strlen(str1+1),len2=strlen(str2+1);
    for(int i=1;i<=len1;i++)
        scanf("%d",&num[i]);
    int l=1,r=len1,res=0;
    while(l<=r)
    {
        int mid=(l+r)>>1;
        memset(del,0,sizeof(del));
        for(int i=1;i<=mid;i++)
            del[num[i]]=1;
        int pos=1;
        for(int i=1;i<=len1;i++)
        {
            if(del[i]==1)
                continue;
            if(pos>len2)
                break;
            if(str1[i]==str2[pos])
                pos++;
        }
        if(pos>len2)
        {
            res=mid;
            l=mid+1;
        }
        else
            r=mid-1;
    }
    printf("%d\n",res);
    return 0;
}
