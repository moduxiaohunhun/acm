/*按照白书模板写的，书上显示结果为3，实际运行返回结果为2 。。。。。。*/
#include <iostream>
#include <string>
#include <stdio.h>
#include <math.h>
#include <algorithm>
using namespace std;
const int MAX_N = 100000;
int par[MAX_N];
int height[MAX_N];
int N, K;
int T[MAX_N], X[MAX_N], Y[MAX_N];
void init(int n)
{
	for (int i = 0; i < n; i++)
	{
		par[i] = i;
		height[i] = 0;
	}
}
int find(int x)
{
	if (par[x] == x)
		return x;
	else
	{
		return par[x] == find(par[x]);
	}
}
void unite(int x, int y)
{
	x = find(x);
	y = find(y);
	if (x == y)
	{
		return;
	}
	if (height[x] < height[y])
	{
		par[x] = y;
	}
	else
	{
		par[y] = x;
		if (height[x] == height[y])
			height[x]++;
	}
}
bool same(int x, int y)
{
	return find(x) == find(y);
}

void solve()
{
	init(N * 3);
	int ans = 0;
	for (int i = 0; i < K; i++)
	{
		int t = T[i];
		int x = X[i] - 1, y = Y[i] - 1;
		if (x < 0 || N <= x || y < 0 || N <= y)
		{
			ans++;
			continue;
		}
		if (t == 1)
		{
			if (same(x, y + N) || same(x, y + 2 * N))
			{
				ans++;
			}
			else
			{
				unite(x, y);
				unite(x + N, y + N);
				unite(x + N * 2, y + N * 2);
			}
		}
		else
		{
			if (same(x, y) || same(x, y + 2 * N))
			{
				ans++;
			}
			else
			{
				unite(x, y + N);
				unite(x + N, y + 2 * N);
				unite(x + 2 * N, y);
			}
		}
	}
	printf("%d\n", ans);
}
int main()
{
	cin >> N >> K;
	for (int i = 0; i < K; i++)
	{
		cin >> T[i] >> X[i] >> Y[i];
	}
	solve();
	return 0;
}
